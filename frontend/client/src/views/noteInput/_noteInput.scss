
// 1. Applying a transform, like relative or absolute positioning,
// creates a new stacking/containing element context. Without 
// position:relative here, applying a transform will change 
// children's offset parent, and thus their positioning.
// TODO: may now be redundant with pos:rel on the note-wrapper below.
px-note-input {
  position: relative; // 1.
  @include flex(0 0 60%);
  z-index: 0;
}


// 1. Size when focused
// 2. Keeps it above the send button when focused/scaled
note-wrapper {
  width: 165%;  // 1.
  position: relative;
  left: -32.5%;
  z-index: 2; // 2.
  box-shadow: 2px 2px 6px rgba(0, 0, 0, .5);
  @include transition($animation-duration);
  @include transform(scale(0.55) translate(0, 0));
  @include screen(desktop){
    box-shadow: 8px 8px 25px rgba(0, 0, 0, .5);
    @include transform(scale(0.45) translate(0, -43.5%));
  }
}


note-wrapper.focus-text-area {
  @include transform(scale(1) translate(-21%, 0%));
  @include screen(desktop){
    @include transform(scale(.7) translate(-22%, -18%));
  }
}


// 1. Magic numbers for mobile safari. 
note-wrapper.focus-image-picker {
  @include transform(scale(1.32) translate(28.2%, -8%)); // 1.
  @include screen(desktop){
    @include transform(scale(.7) translate(28.2%, -24%));
  }
}


fixed-height-hack {
  padding-top: 43.4%;
}


note {
  background-color: white;
  position: absolute;
  top:0;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: 1;
}

$img-width: 43.4%;
$text-width: 100% - $img-width;

// Image Picker
px-note-input px-image-picker {
  width: 43.4%;
  height: 100%;
  position: absolute;
}


.focus-text-area px-image-picker {
  cursor: default;
  pointer-events: none;
}


// TODO cruft?
img.picked.animate {
  @include transition(all $animation-duration);
}


note-right-content {
  text-align: center;
  position: absolute;
  left: $img-width;
  width: $text-width;
  font-size: 2.5vw;
  font-family: "Droid Serif";
  height: 100%;
  @include screen(desktop){
    font-size: 14.4px;
  }
}

.focus-image-picker note-right-content {
  cursor: default;
  pointer-events: none;
}


text-box {
  border: 0;
  line-height: 1.45em;
  position: absolute;
  top: 28%;
  left: 10%;
  width: 80%;
  font-size: 1.78em;
  @include screen(desktop){
    top: 15%;
    font-size: 2.38em;
  }
}


text-input-instruction {
  position: absolute;
  top: 8%;
  left: 0;
  font-style: italic;
  font-size: 1.4em;
  text-align: center;
  width: 100%;
  color: #888;
}


text-input-instruction.too-many-lines {
  color: red;
}


text-input {
  top: 0;
  left: 0;
  width: 100%;
  position: absolute;
  text-align: center;
  outline: none;
  minimum-height: 100px;
  max-height: 6em;
  z-index: 1;
  @include screen(desktop){
    margin-top: 2.5%;
    line-height: 2.1em;
    max-height: 10em;
  }
}


text-input div {
  pointer-events: none;
}


text-rule {
  pointer-events: none;
}


px-pencil {
  position: absolute;
  left: 43%;
  top: -49%;
  width: 56%;
  @include screen(desktop){
    width: 48%;
    left: 43%;
    top: -8%;
    svg {
      width: 24%;
      height: 100%;
    }
  }
}


text-rule.has-content.focused {
  display: block;
}

text-rule.has-content {
  display: none;
}

text-rule line {
  pointer-events: none;
  margin-top: 8.2%;
  position: relative;
  top: 0;
  border-bottom: 1px solid $textAreaBorderColor;
  @include screen(desktop){
    note-right-content:hover text-rule.has-content {
      display: block;
    }
    margin-top: 11.2%;
    border-bottom: 5px solid $textAreaBorderColor;
  }
}


note-right-content:hover line {
  border-color: $blue;
}


.focus note-right-content:hover line {
  border-color: $lighter-grey;
}

note-right-content .too-many-lines line {
  border-bottom: 2px solid red;
  border-color: red;
}


// Image Picker Buttons

// 1. Below the image
// 2. Behind the image
// 3. Width of the image region on the card
cropper-controls {
  position: absolute;
  z-index: -1; // 1.
  bottom: 2em; // 2.
  width: 43%; // 3.
  font-size: .7em;
  text-align: center;
  @include px-transition;
}


cropper-controls > * {
  background-color: transparent;
  border: 0;
  padding: .6em 1em;
  padding-bottom: 0;
}


cropper-controls.shown {
  display: block;
  @include transform(translateY(125%));
  @include screen(desktop){
    font-size: 1.5em;
  }
}


cropper-controls pick-image {
  border-right: 1px solid #999;
}


px-note-input px-signature {
  position: absolute;
  bottom: 3em;
  font-size: 1.3em;
  @include justify-content(center);
  realname {
    font-weight: bold;
  }
  @include screen(desktop){
    font-size: 1.9em;
  }
}

envelope {
  position: absolute;
  width: 105%;
  height: 130%;
  top: -15%;
  left: -12.5%;
  @include transition(600ms);
  @include transform(translateX(-140%));
}


envelope.shown {
  @include transform(translateX(10%));
}


envelope.back {
  background-color: #cb3e41;
}


envelope.front {
  background-image: url("views/compose/envelope.top.png");
  background-size: cover;
  z-index: 3;
}


flap {
  @include vendor-prefix('backface-visibility', hidden);
  @include transition(500ms);
  position: absolute;
  top: 0;
  bottom: 0;
  background-size: 100% 100%;
  left: 70%;
  right: 0;
  perspective: 800;
}


envelope.front flap {
  background-image: url('views/compose/envelope.top.flap.png');
  @include vendor-prefix('transform-origin', 100% 0%);
  @include transform(rotatey(180deg));
}


envelope.front flap.closed {
  @include transform(rotatey(0deg));
}


envelope.back flap {
  background-image: url('views/compose/envelope.bottom.flap.png');
  @include vendor-prefix('transform-origin', 0% 0%);
  @include transform(translateX(100%));
}


envelope.back flap.closed {
  @include transform(translateX(100%) rotatey(180deg));
}


